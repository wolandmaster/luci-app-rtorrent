#!/usr/bin/env lua
-- Copyright 2014-2022 Sandor Balazsi <sandor.balazsi@gmail.com>
-- This is free software, licensed under the Apache License, Version 2.0

local json = require "luci.jsonc"
local rtorrent = require "rtorrent.xmlrpc"

local methods = {
	rtorrent_rpc = {
		args = { xml = "xml" },
		call = function(args)
			local body, err = rtorrent.send_xmlrpc_request(args.xml)
			if not body then return { error = err }, 1 end
			return { xml = body }
		end
	}
}

local function parse_input()
	local parse, done, err = json.new()
	while true do
		local chunk = io.read(4096)
		if not chunk then break
		elseif not done and not err then
			done, err = parse:parse(chunk)
		end
	end
	if not done then
		print(json.stringify({ error = err or "Incomplete input" }))
		os.exit(1)
	end
	return parse:get()
end

local function validate_args(func, uargs)
	local method = methods[func]
	if not method then
		print(json.stringify({ error = "Method not found" }))
		os.exit(1)
	end
	if type(uargs) ~= "table" then
		print(json.stringify({ error = "Invalid arguments" }))
		os.exit(1)
	end
	uargs.ubus_rpc_session = nil
	local margs = method.args or {}
	for key, value in pairs(uargs) do
		if margs[key] == nil or (value ~= nil and type(value) ~= type(margs[key])) then
			print(json.stringify({ error = "Invalid arguments" }))
			os.exit(1)
		end
	end
	return method
end

if arg[1] == "list" then
	local rv = {}
	for name, method in pairs(methods) do rv[name] = method.args or {} end
	print((json.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
	local args = parse_input()
	local method = validate_args(arg[2], args)
	local result, code = method.call(args)
	print((json.stringify(result):gsub("^%[%]$", "{}")))
	os.exit(code or 0)
end
